java基础语法 -- public/protected/private/this介绍
          https://blog.csdn.net/u011541946/article/details/73215841
      
继承语法：https://blog.csdn.net/u011541946/article/details/73253463 
         父类和子类的说法，父类就是被继承的类，子类就是将要继承父类的类。
         使用继承，是为了减少代码的重复，增加代码的复用性。
         
方法重写重写：https://blog.csdn.net/u011541946/article/details/73351258
             Java编程语言中，子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。方法重写又称方法覆盖。

            方法的重写有几个特点：
                  1）发生在子类，有子类就有继承

                  2）父类方法的参数列表必须完全与被子类重写的方法的参数列表相同

                  3）父类的返回类型必须与被子类重写的方法返回类型相同

                  4）Java中规定，被子类重写的方法不能拥有比父类方法更加严格的访问权限
                  
            方法重写与方法重载的根本区别就是：
                  方法重写是在子类和父类之间，而方法重载是在同一个类里面。
                  方法重写，子类和父类方法必须保持，返回类型，方法名称，参数个数和参数类型完全保持一致。
                  而方法重载，只有方法名称相同，其他都可以不相同。

            final中的一点：final方法不能被子类的方法覆盖
	    
多态语法：https://blog.csdn.net/u011541946/article/details/73431276
	 封装和继承都是为了多态服务的。什么是多态呢？多态指同一个实体同时具有多种形式。
	 或者这样描述，同一个事件发生在不同对象上面，就有不同效果，这样的例子叫多态。
	 
	 调用了同样的方法，得到的结果不相同，这就是多态。多态存在的三个必要条件：
		1）需要继承

		2）需要重写

		3）父类引用指向了子类对象

		这里解释下第三点，父类引用指向了子类对象。
		Student st = new CollegeStudent(); 这个st是父类Student的一个引用，但是它指向了子类CollegeStudent()。
		多态的概念了解一下就可以，在自动化测试和开发中，你也很少遇到。
		
Abstract类和方法：
	https://blog.csdn.net/u011541946/article/details/73441112
	如果类名前面用abstract修饰，这个类就是抽象类；如果方法名称前面有abstract修饰，这个方法就是抽象方法。
	为什么要有抽象类呢，抽象类主要是用来写接口用的。
	只需要抽象定义一个类，不需要具体实现。然后子类可以继承这个抽象类，子类分别去实现抽象类里面的抽象方法。
	抽象类里面的方法不一定是抽象方法，但是有抽象方法的类一定就是抽象类；抽象类中的抽象方法不需要具体实现，应该由子类去实现。
	
	抽象类和抽象方法有以下特点：
		1）抽象类不能初始化类的实例对象，但是可以创建子类的引用。
			抽象类不能初始化实例对象；抽象方法不需要实现，让子类去实现。
			abstract public class Student {
					abstract public int getAge();
			}
			getAge()里面写实现方法，这个地方就会报错
			
			子类实现：
			public class Student_ABC extends Student {
				public int getAge(){
					return 15;
				} 
			}

			public static void main(String[] args) {
				Student st_abc = new Student_ABC();
				System.out.println(st_abc.getAge());
				}
			}
			
		2）抽象方法不需要实现，只需要声明，让子类去实现

接口：https://blog.csdn.net/u011541946/article/details/73441439
	接口和抽象类有点类似，接口不是类，接口只是声明了方法，没有具体实现。
	在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。
	一个类通过继承接口的方式，从而来继承接口的抽象方法。接口无法被实例化，但是可以被实现。
	一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。
	
	1. 先来了解接口的声明
		Java中是用 interface 声明接口的，类是用class来声明。
			public interface Student {
				public int getAge();
			}
	2. 接口的实现
		接口的实现，需要继承这个接口的类去重写方法来实现。
			public class Student_ABC implements Student {
				public int getAge(){
					return 15;
				}
			}
		在Java中接口的实现需要用implements关键字，关键字后面跟着接口。
	
	3.什么时候用implements和extends
		1）如果前后两个都是class,那么就用extends
		2）如果前面一个是class,后面一个是interface，那么就用implements
		3）如果前后两个都是interface，就用extends。

封装:https://blog.csdn.net/u011541946/article/details/73477428
	 封装是把过程和数据包围起来，对数据的访问只能通过已定义的接口。
	 面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。
	 封装是一种信息隐藏技术，在java中通过关键字private，protected和public实现封装。
	 
	 什么是封装？
		 封装把对象的所有组成部分组合在一起，封装定义程序如何引用对象的数据，封装实际上使用方法将类的数据隐藏起来控制用户对类的修改和访问数据的程度。 
		 适当的封装可以让程式码更容易理解和维护，也加强了程式码的安全性。
		 
	 1）对象的数据封装特性彻底消除了传统结构方法中数据与操作分离所带来的种种问题，提高了程序的可复用性和可维护性，降低了程序员保持数据与操作内容的负担。
	 2）对象的数据封装特性还可以把对象的私有数据和公共数据分离开，保护了私有数据，减少了可能的模块间干扰，达到降低程序复杂性、提高可控性的目的。

	

第一节：利用geckodirver启动firefox
      import java.util.concurrent.TimeUnit;
      import org.openqa.selenium.WebDriver;
      import org.openqa.selenium.firefox.FirefoxDriver;


      public class LanuchFirefox {

        public static void main(String[] args) throws InterruptedException {
          // TODO Auto-generated method stub
          //System.setProperty("webdriver.firefox.marionette", ".\\Tools\\geckodriver.exe"); 48版本以下
          
          //除了加入火狐驱动文件外，还需要配置firefox的路径
          System.setProperty("webdriver.gecko.driver", "D:\\Program Files\\eclipse-workspace\\Selenium_Lesson\\tools\\geckodriver.exe");
          System.setProperty("webdriver.firefox.bin", "D:\\Program Files\\Mozilla Firefox\\firefox.exe");

          WebDriver driver = new FirefoxDriver();
          driver.manage().window().maximize();
          //driver.manage().timeouts().implicitlyWait(8, TimeUnit.SECONDS);

          driver.get("https://www.baidu.com");
          Thread.sleep(5000);
          System.out.println("当前打开的页面标题是："+driver.getTitle());

          driver.quit();

        }
        
        总结：

              1. 介绍了Selenium 3.0上如何启动firefox版本大于48和低于48的情况

              2. driver.get() 是打开站点，传入的参数是url

              3. 知道了如何设置浏览器窗口最大化

              4. 知道了如何设置隐性等待时间；Thread.sleep(5000) （5s）

              5. driver.getTitle()是获取当前页面的title值，返回的是字符串对象

              6. driver.quit()是关闭并退出浏览器。
              

第二节：利用chromedriver自动化chrome
      import java.util.concurrent.TimeUnit;
      import org.openqa.selenium.WebDriver;
      import org.openqa.selenium.chrome.ChromeDriver;
      import org.openqa.selenium.chrome.ChromeOptions;

      public class LaunchChrome {

        public static void main(String[] args) throws InterruptedException {
          // TODO Auto-generated method stub

          System.setProperty("webdriver.chrome.driver", "./tools/chromedriver.exe");
          System.setProperty("webdriver.chrome.bin", "C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe");

          ChromeOptions opiions=new ChromeOptions();
          opiions.addArguments("--start-maximized");

          WebDriver driver = new ChromeDriver(opiions);
          String url = "https://www.baidu.com";
          driver.get(url);

          //driver.manage().window().maximize();  报错
          Thread.sleep(2000);
          System.out.println("当前页面的标题是："+driver.getTitle());

          driver.quit();
        }

    }
    

第三节：利用IEDriverServer自动化IE
      import java.util.concurrent.TimeUnit;
      import org.openqa.selenium.WebDriver;
      import org.openqa.selenium.ie.InternetExplorerDriver;;

      public class LaunchIE {

        public static void main(String[] args) throws InterruptedException{
          // TODO Auto-generated method stub
          System.setProperty("webdriver.ie.driver", "./tools/IEDriverServer.exe");
          
          //System.setProperty("webdriver.firefox.bin", "D:\\Program Files\\Mozilla Firefox\\firefox.exe"); IE安装在默认位置，不需要这一步

          WebDriver driver = new InternetExplorerDriver();
          driver.manage().window().maximize();
          //driver.manage().timeouts().implicitlyWait(8, TimeUnit.SECONDS);

          driver.get("https://www.baidu.com");
          Thread.sleep(5000);
          System.out.println("当前打开的页面标题是："+driver.getTitle());

          driver.quit();
        }

      }
    
    
第四节：
      自动化脚本编写比较容易，最大的困难去如何去写测试断言。
      自动化测试，最重要的还是落在测试上面，而不是自动化，自动化只是手段。
      断言的写法，就考验出一个测试工程师是否考虑全面，体现出你的用例编写水平。

      举例：验证打开链接是百度首页

      分析问题：我们输入了url，然后打开一个页面，如果判断这个页面是不是我们提前知道的页面呢。

            1. 获取当前url是不是和输入的一致，假如链接没有发生重定向。

            2. 获取当前页面title，是不是我们期待的结果。

            3. 在页面元素body找一个特征元素，这个特征元素能够代表是该网站。

             我想，也大概只有上面三点依据可以判断我们访问的网站对不对。
             第一点：盗链，输入一个网站URL，显示的内容是别人的网站，而不是你测试的网站，甚至有链接的重定向出现。
             第二点：title这个值是网站前端开发同学写入的，基本上可以代表是要打开的网站。
             第三点：有点难找这样的特征元素，而且有时候找到了也不一定是正确的。
             
             下面的代码就用页面的title来作为我们判断的依据：
             
                  import java.util.concurrent.TimeUnit;
                  import org.openqa.selenium.WebDriver;
                  import org.openqa.selenium.chrome.ChromeDriver;
                  import org.openqa.selenium.chrome.ChromeOptions;

                  public class FirstScript {

                        public static void main(String[] args) throws InterruptedException {
                              // TODO Auto-generated method stub
                              System.setProperty("webdriver.chrome.driver", "./tools/chromedriver.exe");

                              String loc = "C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe";
                              System.setProperty("webdriver.chrome.bin", loc);

                              ChromeOptions opt = new ChromeOptions();
                              opt.addArguments("--start-maximized");
                              WebDriver driver = new ChromeDriver(opt);

                              driver.get("http://news.baidu.com");
                              Thread.sleep(1000);

                              String title = "百度一下，你就知道";
                              try {
                                    assert title.equals(driver.getTitle());
                                    //if(title.equals(driver.getTitle()))
                                    System.out.println("Test pass");
                              }catch(Exception e){
                                    System.out.println("Test fail");
                                    e.printStackTrace();
                              }
                              finally{
                                    System.out.println(driver.getTitle());
                                    driver.quit();
                              }

                        }
 
 
第五节：
      从代码角度去解释启动firefox的过程：
            https://blog.csdn.net/u011541946/article/details/73090988
            
      构造函数总结：
            1）构造函数名称一定要和类名称保持一致。

            2）构造函数会在对象创建过程是调用

            3）构造函数可以有多个，用参数个数和参数类型区分

            4）构造函数内部没有返回语句

      方法的重载：
            方法的重载和构造函数的调用有一点相同
            
            求两个小数的求和甚至两个字符串相连的结果。难道我们要分别取一个名称，写小数相加和字符串相加？
            在编程语言中为了解决这个问题，引入了方法重载的概念，重载的基本特点就是：
                  方法名称相同，但是方法参数类型不同，参数类型不同，包括，参数个数和参数变量类型不同。
                  如何用方法重载的思想去实现两个东西相加，包括整数，小数和字符串，如果是字符串，就是叫字符串连接，就不叫相加。 

                  public class MyClass {

                        public static void main(String[] args) {

                              System.out.println(Add(5,9));
                              System.out.println(Add(5.8,9.34));
                              System.out.println(Add("Hello","Java"));
                        }

                        public static int Add(int a, int b){

                              return (a + b);
                        }

                      public static double Add(double a, double b){

                              return (a + b);
                        }

                      public static String Add(String a, String b){

                              return (a + b);
                        }
                  }


第六节：
      Timeout接口相关方法介绍：
            https://blog.csdn.net/u011541946/article/details/73175068
            
            Timeout接口描述文字部分，下面有三个常见的接口。

                  implicitlyWait(long time, TimeUnit unit);

                  setScriptTimeout(long time, TimeUnit unit);

                  pageLoadTimeout(long time, TimeUnit unit);

                  implicitlyWait()：
                        隐式时间等待：隐式时间等待是在查找元素的时候，设置一个最大时间值，如果driver第一次没有找到网页元素，那么就继续找，直到消耗了设置的最大时间值
                                    还是没有找到，那么就抛出没有找到元素的异常。
                                    如果在设置时间范围内就找到了该元素，那么就执行下一行代码，不需要再等时间，这就是隐式等待的含义。
                                    所以，隐式时间等待一般结合查找网页元素一起。

                  setScriptTimeout()：在设置规定的时间内，等待异步脚本的执行结束，而不是里面抛出错误。
                                      这个在执行javascript脚本的时候可能会使用，后面我们介绍了使用Javascript脚本执行Selenium相关操作后在介绍具体使用方法。

                  pageLoadTimeout()：字面意思就网页加载超时，作用就是在设置规定时间内，等待网页完整加载完成，而不是里面抛出错误。
                                     我们知道如果网速慢，或者网页元素太多，例如网页做了大面积渲染，肯定会造成网页加载速度变慢。
                                     这个接口的作用就是，来处理这类问题的。
                                     设置时间等待的语句应该换成这个语句更合适一些，毕竟我们的目的就是等待网页加载完成。
                                     
                                     driver.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS);
                                     
                   Selenium方法或者接口分成三类:
                        第一类是driver相关，也就是操作浏览器本身设置
                        第二类是元素相关，就是一些元素的点击，输入等操作
                        第三类是一些工具支持类，例如截图，日志输出，事件监听。
                        
                        
      window接口相关方法介绍：
            windows接口下有几个方法，主要是用来控制浏览器窗口设置，例如窗口大小，最大，最小，全屏，位置：
                  void setSize(Dimension targetSize);
                  void setPosition(Point targetPosition);
                  Dimension getSize();
                  Point getPosition();
                  void maximize();
                  void fullscreen();
                  
            浏览器位置设置的自动化脚本：
                  import org.openqa.selenium.Point;
                  import org.openqa.selenium.WebDriver;
                  import org.openqa.selenium.chrome.ChromeDriver;

                  public class PageLoadTest {

                        public static void main(String[] args) {

                            System.setProperty("webdriver.chrome.driver", "./tools/chromedriver.exe");
                            System.setProperty("webdriver.chrome.bin", "C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe");

                              WebDriver driver = new ChromeDriver();
                              
                              // 按下F11，可以看到全屏效果
                              driver.get("https://www.baidu.com");
                              driver.manage().window().fullscreen();
                              
                              driver.findElement(By.id("kw")).sendKeys("selenium");

                              // 注意targetPosition是一个点对象，把一个点作为参数传入，不能直接写（300， 600）
                              Point targetPosition = new Point(300, 600);
                              driver.manage().window().setPosition(targetPosition);
                              System.out.println(driver.manage().window().getPosition());
                              
                              // 注意targetSize是一个对象传入，也不可以直接写成 1024*768
                              Dimension targetSize = new Dimension(1024, 768); 
                              driver.manage().window().setSize(targetSize);
                              System.out.println(driver.manage().window().getSize());
                        }
                  }


第七节：
    static关键字：
      Java中用static关键字的方法，就叫静态方法，静态方法只能被类本身调用，不能被类的实例对象调用（会出现警告，类型不匹配）
      而没有static关键字的方法，在类中叫实例方法，任何一个实例对象都能调用实例方法。同样，类变量也和方法类似。
            public class Hello {

                  public static String name;

                  public static void DoSomethingWithStatic(){
                        System.out.println("调用了static方法");
                  }

                  public void DoSomethingWithNoStatic(){
                        System.out.println("调用了非static方法");
                  }
            }
            
            public class MyClass {
                  public static void main(String[] args) {
                        //调用静态方法和调用实例方法
                        Hello hello = new Hello();
                        // 类本身调用静态方法
                        Hello.DoSomethingWithStatic();
                        // 实例对象调用实例方法，如果实例调用静态方法，会出现警告
                        hello.DoSomethingWithNoStatic();

                        // 类本身调用静态成员变量
                        Hello.name = "Anthony";
                        System.out.println(Hello.name);
                        // 实例对象调用静态成员变量，会出现警告：The static field Hello.name should be accessed in a static way
                        hello.name = "Tom";
                        System.out.println(hello.name);
                  }
            }
            
      总结：
            用到了static修饰的方法或者变量，只能被类本身调用，没有static修饰的方法是实例方法，实例对象能调用实例方法。
            

第八节：
      Navigation接口介绍：
            Navigation接口，主要包括平时浏览器的前进，后退，打开网址，刷新当前页操作。在Navigation接口下，我能找到下面四个方法：
                  void back()
                  void forward()
                  void to(String url)
                  void to(URL url)
                  void refresh()

            	  driver.get("https://www.baidu.com");  
                    Thread.sleep(2000);

                    driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS); 

                    // to(String url)在当前页打开新的网页
                    driver.navigate().to("http://news.baidu.com");
                    Thread.sleep(2000);

                    // back()后退到百度首页
                    driver.navigate().back();
                    Thread.sleep(2000);

                    // forward() 前进到百度新闻
                    driver.navigate().forward();
                    Thread.sleep(2000);

                    // 刷新当前页
    
                    driver.navigate().refresh();
                    
  第九节：
      findElement之By XPath：
            XPath一般在实际自动化测试项目中用到比较多，虽然有8种元素定位方法，但是XPath如果写熟练了，基本上可以用XPath完成百分之95以上的元素定位。例如，在上面的两个元素，我可以用好几种XPath表达式去描述这个元素。
                  百度搜索输入框:
                        .//*/input[@id='kw']

                        .//*/input[@name='wd']

                        .//*/input[@class='s_ipt']

                  搜索提交按钮：
                        .//*/input[@id='su']

                        .//*/input[@value='百度一下']

                        .//*/input[@class='bg s_btn']
                        
                        
      findElement之By LinkText：
            
		//By linkText 查找元素
		driver.findElement(By.linkText("新闻")).click();
		Thread.sleep(1000);
            
      findElements举例：
            indElements是用来查找一组元素，而findElement是用来查找匹配表达式的第一个元素
            
      
第十节：
	1. 获取当前页面title和url：
		String title = driver.getTitle();
		System.out.println(title);

		WebElement news_link = driver.findElement(By.linkText("新闻"));
		news_link.click();
		Thread.sleep(1000);

		String current_url = driver.getCurrentUrl();

		assert current_url.equals("http://news.baidu.com");
	
	getCurrentUrl()是获取当前网页的URL之外，还需要学会先定义一个WebElement对象,通过element.方法名称（）的方式去进行元素相关操作。
	之前我们都是从driver.findElement(By.id("xxx")).元素相关方法()来进行操作，以后建议写成本文这样的写法，脚本看起来更加清晰，高效。
	

	2. 获取当前页的源码:
		driver.get("https://www.baidu.com");  
               	Thread.sleep(1000);
       
		WebElement news_link = driver.findElement(By.linkText("新闻"));
		news_link.click();
		Thread.sleep(1000);

		// 打印当前页面的源码
		System.out.println(driver.getPageSource());
		
		拿到源码，如何去查找我们需要的信息，需要一点前端知识，和正则匹配的内容。
		
	3. 获取浏览器窗体的句柄:
		句柄，有时候浏览器的窗口句柄，也叫windows id，英文单词更好理解。
		你打开了一个浏览器，你开一个tab，就生成了一个id，这个id直到你关闭这个tab才会消失。
		如果你在一个浏览器上打开多个tab，那么就有多个windows id。
		为什么你关闭其中一个tab,但是不影响其他tab的显示，就是这个id的作用。
		介绍如何获得浏览器窗体的句柄或者叫编号，为后面的driver实例在多个窗体之间切换做准备。
		
		driver.get("https://www.baidu.com");  
       		Thread.sleep(1000);

		// 打印当前页面的的句柄
		System.out.println(driver.getWindowHandle());
		
		
		driver.get("https://www.baidu.com");  
       		Thread.sleep(1000);

		WebElement setHome_link = driver.findElement(By.partialLinkText("设为主页"));
		setHome_link.click();
		Thread.sleep(1000);
		System.out.println(driver.getWindowHandles());
		打印出来是一个list/set：
			[CDwindow-49451fa1-b9ab-4c6a-a94f-b677637d8b50, CDwindow-d3238ea1-d742-4595-acb2-c08f2b1f5d6b]
			
	4. 浏览器退出quit和close的区别:
		close方法是，关闭当前窗口，这个当前，如何理解，就是driver实例操作的页面，叫当前。
		如果当前窗口只有一个tab，那么这个close方法就相当于关闭了浏览器。
		quit方法就是直接退出并关闭所有关联的tab窗口。
		所以，close方法一般关闭一个tab，quit方法才是我们认为的完全关闭浏览器方法。
		
		一般来说，我们在自动化测试脚本运行完之后，需要恢复到干净环境，所以，一般都采用driver.quit（）来直接关闭浏览器。

	5. webdriver处理浏览器多窗口切换：
		switch.to.window(handle)
		
		driver.get("https://www.jd.com/");  
       		Thread.sleep(1000);

		//点击京东左侧菜单中的 手机
		WebElement phone_link = driver.findElement(By.linkText("手机"));
		phone_link.click();
		Thread.sleep(1000);

		// 获取当前页面句柄  
		String handle = driver.getWindowHandle();  
		// 获取所有页面的句柄，并循环判断不是当前的句柄 
		for (String handles : driver.getWindowHandles()) {  
		    if (handles.equals(handle))  
			continue;  
		    driver.switchTo().window(handles);  
		}  

		WebElement xiaomi_link = driver.findElement(By.linkText("小米"));
		xiaomi_link.click();
		Thread.sleep(1000);



      

            
      







